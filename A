local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local AppearFolder = workspace:FindFirstChild("__Extra") and workspace.__Extra:FindFirstChild("__Appear")

local locations = {
    {Name = "Location 1", CFrame = CFrame.new(-6161.25781, 140.639832, 5512.9668)},
    {Name = "Location 2", CFrame = CFrame.new(-5868.44141, 132.70488, 362.519379)},
    {Name = "Location 3", CFrame = CFrame.new(-5430.81006, 107.441559, -5502.25244)},
    {Name = "Location 4", CFrame = CFrame.new(-702.243225, 133.344467, -3538.11646)},
    {Name = "Location 5", CFrame = CFrame.new(450.001709, 117.564827, 3435.4292)},
    {Name = "Location 6", CFrame = CFrame.new(3230.96826, 135.41008, 36.1600113)}
}

local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)

if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end

function TPReturner()
    local Site
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0
    for _, v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _, Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, Players.LocalPlayer)
                end)
                wait(4)
                break -- Exit the loop after finding a suitable server to teleport to
            end
        end
    end
end


local function hasSpawned()
    return AppearFolder and #AppearFolder:GetChildren() > 0
end

local function tweenTeleport(targetCFrame)
    if not Character or not Character:FindFirstChild("HumanoidRootPart") then return end
    local HRP = Character.HumanoidRootPart
    local Tween = TweenService:Create(HRP, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = targetCFrame})
    Tween:Play()
    Tween.Completed:Wait()
end

local function fireProximityPrompts()
    if not AppearFolder then return end
    for _, mount in ipairs(AppearFolder:GetChildren()) do
        for _, descendant in ipairs(mount:GetDescendants()) do
            if descendant:IsA("ProximityPrompt") then
                fireproximityprompt(descendant)
            end
        end
    end
end

local DelayToggle = false

local function checkMountsAndTeleport()
    local inventoryMounts = {}
    for _, mount in ipairs(LocalPlayer.leaderstats.Inventory.Mounts:GetChildren()) do
        table.insert(inventoryMounts, mount.Name:sub(1, 4))
    end

    for _, mount in ipairs(AppearFolder:GetChildren()) do
        local mountId = mount.Name:sub(1, 4)
        for _, invMount in ipairs(inventoryMounts) do
            if mountId == invMount then
                Fluent:Notify({
                    Title = "Mount Detected!",
                    Content = "Matching mount found! Server hopping...",
                    Duration = 5
                })
                TPReturner()
                return
            end
        end
    end

    for _, mount in ipairs(AppearFolder:GetChildren()) do
        local targetPosition = mount:GetPivot()
        tweenTeleport(targetPosition)

        if DelayToggle then
            task.wait(15)  -- Waits 15 seconds ONLY if toggle is enabled
        end

        fireProximityPrompts()
    end
end

local function teleportSequence()
    for _, loc in ipairs(locations) do
        tweenTeleport(loc.CFrame)
        task.wait(3)

        if hasSpawned() then
            checkMountsAndTeleport()
            Fluent:Notify({
                Title = "Mount Collected!",
                Content = "Server hopping...",
                Duration = 5
            })
            TPReturner()
            return
        end
    end
    TPReturner()
end

local Window = Fluent:CreateWindow({
    Title = "Etherbyte Hub",
    SubTitle = "by Dantes",
    TabWidth = 160,
    Size = UDim2.fromOffset(400, 350),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local TeleportToggle = Tabs.Main:AddToggle("AutoTeleport", {Title = "Auto Find Mount (serverHop)", Default = false })

TeleportToggle:OnChanged(function(enabled)
    if enabled then
        teleportSequence()
    end
end)

local DelayToggleOption = Tabs.Main:AddToggle("DelayBeforeFire", {Title = "Wait 15s Before Collecting", Default = false })

DelayToggleOption:OnChanged(function(enabled)
    DelayToggle = enabled
end)

Tabs.Main:AddButton({
    Title = "Copy Discord Link",
    Description = "Copies the Discord invite link to clipboard",
    Callback = function()
        setclipboard("https://discord.gg/WGVvxfzTP2")
        Fluent:Notify({
            Title = "Copied!",
            Content = "Discord link copied to clipboard.",
            Duration = 3
        })
    end
})

Tabs.Main:AddParagraph({
    Title = "JOIN UP",
    Content = "Join to get the main script!"
})

Window:SelectTab(1)
Fluent:Notify({
    Title = "Etherbyte Hub",
    Content = "Auto Find Mount System Loaded!",
    Duration = 5
})

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
InterfaceManager:SetFolder("EtherScriptHub")
SaveManager:SetFolder("EtherScriptHub/AriseCrossover")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)
SaveManager:LoadAutoloadConfig()
